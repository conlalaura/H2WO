project_root/
│
├── app/                         # Folder for the Flask app
│   ├── __init__.py               # Initialize Flask app
│   ├── routes.py                 # Flask routes
│   └── models.py                 # DB models or MongoDB interactions
│
├── static/                       # Folder for static files
│   ├── css/                      # Folder for CSS files
│   │   └── styles.css            # Custom CSS
│   ├── js/                       # Folder for JavaScript files
│   │   ├── map.js                # JS logic for Leaflet map
│   │   └── chart.js              # JS logic for Chart.js chart
│   └── img/                      # Folder for any images
│
├── templates/                    # Folder for HTML templates
│   └── index.html                # Main HTML file (Flask will render this)
│
├── config.py                     # Configuration for Flask and MongoDB
├── requirements.txt              # Python dependencies for the project
├── README.md                     # Documentation
└── app.py                        # Main entry point for the Flask application

##############################################################################################################
Top-Level Structure (project_root/)
##############################################################################################################
The root level is kept minimal, containing only essential project-wide files and directories for high-level organization. This clean structure makes it easy to locate critical files when working on or deploying the project.

app/: Contains the core Flask application logic, including routes and database interactions. Placing all core application files within app/ provides modularity and makes it easier to scale by separating the app logic from configuration, static assets, and templates.

static/: Dedicated to static files like JavaScript, CSS, and images. Flask treats the static/ folder as the location to serve non-dynamic resources, so organizing it here is standard practice.

templates/: Holds all HTML templates. Flask searches for templates in this directory by default, making it convenient for serving HTML content directly from here.

config.py: A single configuration file that stores settings for Flask, MongoDB, and other application-wide configurations. Keeping it separate from the app/ directory improves modularity and allows configuration to be easily adjusted without affecting the application logic.

requirements.txt: Lists Python dependencies, making it easy to recreate the environment. Placed at the root for easy access when setting up or deploying the app.

README.md: Holds documentation about the project, setup instructions, and any important information for users or contributors.

app.py: The main entry point for running the Flask application. Placed at the root for quick access, following a common convention in Flask projects. It initializes and runs the app from within the app/ directory.

##############################################################################################################
Inside app/ Directory
##############################################################################################################
The app/ directory encapsulates all logic and core application files to keep everything organized.

__init__.py: Initializes the Flask app and imports configurations, setting up the application environment. This is the file where the app is instantiated and configured, allowing other modules to import app as needed.

routes.py: Manages all Flask routes (or “endpoints”) for the server. This modular approach separates the route logic from the main application logic (app.py), making routes easy to locate and modify.

models.py: Contains the database interaction layer and MongoDB models (if needed). Separating data models and MongoDB access logic from route logic (routes.py) makes the code more maintainable and allows potential reuse of the database logic in other contexts.

##############################################################################################################
Inside static/ Directory
##############################################################################################################
The static/ directory organizes all front-end resources, such as CSS, JavaScript, and images, in a way that’s accessible to the Flask server.

css/: Houses custom CSS files like styles.css, which are used to style the HTML elements served to users. Grouping CSS in a single folder makes it easy to find and edit styles.

js/: Contains JavaScript files, separated based on their functionality.

map.js: Contains Leaflet.js logic for displaying and managing the map on the front end.

chart.js: Holds Chart.js logic for managing and rendering the chart. Keeping these JavaScript files separated by function helps keep code modular and organized.

img/: Used for storing static image files (if any). Keeping images here helps centralize non-dynamic resources, allowing them to be easily accessed and served by the server.

##############################################################################################################
Inside templates/ Directory
##############################################################################################################
The templates/ directory is where all HTML templates live. Flask will look here by default when rendering HTML files.

index.html: This is the main HTML template that will be rendered by the Flask route, typically the landing page. By placing it here, it’s easy to extend with other HTML templates if needed, allowing consistent, reusable HTML components across different pages.